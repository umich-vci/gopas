/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gopas

import (
	"encoding/json"
	"time"
)

// VaultFileStream struct for VaultFileStream
type VaultFileStream struct {
	StayLockAfterUpdate  *bool      `json:"StayLockAfterUpdate,omitempty"`
	SeekHandle           *string    `json:"SeekHandle,omitempty"`
	CreationDate         *time.Time `json:"CreationDate,omitempty"`
	ModificationDate     *time.Time `json:"ModificationDate,omitempty"`
	Exist                *bool      `json:"Exist,omitempty"`
	CanRead              *bool      `json:"CanRead,omitempty"`
	CanSeek              *bool      `json:"CanSeek,omitempty"`
	CanWrite             *bool      `json:"CanWrite,omitempty"`
	Position             *int64     `json:"Position,omitempty"`
	Length               *int64     `json:"Length,omitempty"`
	PerformedWrite       *bool      `json:"PerformedWrite,omitempty"`
	CommitChangesOnClose *bool      `json:"CommitChangesOnClose,omitempty"`
	PerformedSeekResume  *bool      `json:"PerformedSeekResume,omitempty"`
	CanTimeout           *bool      `json:"CanTimeout,omitempty"`
	ReadTimeout          *int32     `json:"ReadTimeout,omitempty"`
	WriteTimeout         *int32     `json:"WriteTimeout,omitempty"`
}

// NewVaultFileStream instantiates a new VaultFileStream object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultFileStream() *VaultFileStream {
	this := VaultFileStream{}
	return &this
}

// NewVaultFileStreamWithDefaults instantiates a new VaultFileStream object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultFileStreamWithDefaults() *VaultFileStream {
	this := VaultFileStream{}
	return &this
}

// GetStayLockAfterUpdate returns the StayLockAfterUpdate field value if set, zero value otherwise.
func (o *VaultFileStream) GetStayLockAfterUpdate() bool {
	if o == nil || o.StayLockAfterUpdate == nil {
		var ret bool
		return ret
	}
	return *o.StayLockAfterUpdate
}

// GetStayLockAfterUpdateOk returns a tuple with the StayLockAfterUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetStayLockAfterUpdateOk() (*bool, bool) {
	if o == nil || o.StayLockAfterUpdate == nil {
		return nil, false
	}
	return o.StayLockAfterUpdate, true
}

// HasStayLockAfterUpdate returns a boolean if a field has been set.
func (o *VaultFileStream) HasStayLockAfterUpdate() bool {
	if o != nil && o.StayLockAfterUpdate != nil {
		return true
	}

	return false
}

// SetStayLockAfterUpdate gets a reference to the given bool and assigns it to the StayLockAfterUpdate field.
func (o *VaultFileStream) SetStayLockAfterUpdate(v bool) {
	o.StayLockAfterUpdate = &v
}

// GetSeekHandle returns the SeekHandle field value if set, zero value otherwise.
func (o *VaultFileStream) GetSeekHandle() string {
	if o == nil || o.SeekHandle == nil {
		var ret string
		return ret
	}
	return *o.SeekHandle
}

// GetSeekHandleOk returns a tuple with the SeekHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetSeekHandleOk() (*string, bool) {
	if o == nil || o.SeekHandle == nil {
		return nil, false
	}
	return o.SeekHandle, true
}

// HasSeekHandle returns a boolean if a field has been set.
func (o *VaultFileStream) HasSeekHandle() bool {
	if o != nil && o.SeekHandle != nil {
		return true
	}

	return false
}

// SetSeekHandle gets a reference to the given string and assigns it to the SeekHandle field.
func (o *VaultFileStream) SetSeekHandle(v string) {
	o.SeekHandle = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *VaultFileStream) GetCreationDate() time.Time {
	if o == nil || o.CreationDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || o.CreationDate == nil {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *VaultFileStream) HasCreationDate() bool {
	if o != nil && o.CreationDate != nil {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *VaultFileStream) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetModificationDate returns the ModificationDate field value if set, zero value otherwise.
func (o *VaultFileStream) GetModificationDate() time.Time {
	if o == nil || o.ModificationDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ModificationDate
}

// GetModificationDateOk returns a tuple with the ModificationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetModificationDateOk() (*time.Time, bool) {
	if o == nil || o.ModificationDate == nil {
		return nil, false
	}
	return o.ModificationDate, true
}

// HasModificationDate returns a boolean if a field has been set.
func (o *VaultFileStream) HasModificationDate() bool {
	if o != nil && o.ModificationDate != nil {
		return true
	}

	return false
}

// SetModificationDate gets a reference to the given time.Time and assigns it to the ModificationDate field.
func (o *VaultFileStream) SetModificationDate(v time.Time) {
	o.ModificationDate = &v
}

// GetExist returns the Exist field value if set, zero value otherwise.
func (o *VaultFileStream) GetExist() bool {
	if o == nil || o.Exist == nil {
		var ret bool
		return ret
	}
	return *o.Exist
}

// GetExistOk returns a tuple with the Exist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetExistOk() (*bool, bool) {
	if o == nil || o.Exist == nil {
		return nil, false
	}
	return o.Exist, true
}

// HasExist returns a boolean if a field has been set.
func (o *VaultFileStream) HasExist() bool {
	if o != nil && o.Exist != nil {
		return true
	}

	return false
}

// SetExist gets a reference to the given bool and assigns it to the Exist field.
func (o *VaultFileStream) SetExist(v bool) {
	o.Exist = &v
}

// GetCanRead returns the CanRead field value if set, zero value otherwise.
func (o *VaultFileStream) GetCanRead() bool {
	if o == nil || o.CanRead == nil {
		var ret bool
		return ret
	}
	return *o.CanRead
}

// GetCanReadOk returns a tuple with the CanRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetCanReadOk() (*bool, bool) {
	if o == nil || o.CanRead == nil {
		return nil, false
	}
	return o.CanRead, true
}

// HasCanRead returns a boolean if a field has been set.
func (o *VaultFileStream) HasCanRead() bool {
	if o != nil && o.CanRead != nil {
		return true
	}

	return false
}

// SetCanRead gets a reference to the given bool and assigns it to the CanRead field.
func (o *VaultFileStream) SetCanRead(v bool) {
	o.CanRead = &v
}

// GetCanSeek returns the CanSeek field value if set, zero value otherwise.
func (o *VaultFileStream) GetCanSeek() bool {
	if o == nil || o.CanSeek == nil {
		var ret bool
		return ret
	}
	return *o.CanSeek
}

// GetCanSeekOk returns a tuple with the CanSeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetCanSeekOk() (*bool, bool) {
	if o == nil || o.CanSeek == nil {
		return nil, false
	}
	return o.CanSeek, true
}

// HasCanSeek returns a boolean if a field has been set.
func (o *VaultFileStream) HasCanSeek() bool {
	if o != nil && o.CanSeek != nil {
		return true
	}

	return false
}

// SetCanSeek gets a reference to the given bool and assigns it to the CanSeek field.
func (o *VaultFileStream) SetCanSeek(v bool) {
	o.CanSeek = &v
}

// GetCanWrite returns the CanWrite field value if set, zero value otherwise.
func (o *VaultFileStream) GetCanWrite() bool {
	if o == nil || o.CanWrite == nil {
		var ret bool
		return ret
	}
	return *o.CanWrite
}

// GetCanWriteOk returns a tuple with the CanWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetCanWriteOk() (*bool, bool) {
	if o == nil || o.CanWrite == nil {
		return nil, false
	}
	return o.CanWrite, true
}

// HasCanWrite returns a boolean if a field has been set.
func (o *VaultFileStream) HasCanWrite() bool {
	if o != nil && o.CanWrite != nil {
		return true
	}

	return false
}

// SetCanWrite gets a reference to the given bool and assigns it to the CanWrite field.
func (o *VaultFileStream) SetCanWrite(v bool) {
	o.CanWrite = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *VaultFileStream) GetPosition() int64 {
	if o == nil || o.Position == nil {
		var ret int64
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetPositionOk() (*int64, bool) {
	if o == nil || o.Position == nil {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *VaultFileStream) HasPosition() bool {
	if o != nil && o.Position != nil {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int64 and assigns it to the Position field.
func (o *VaultFileStream) SetPosition(v int64) {
	o.Position = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *VaultFileStream) GetLength() int64 {
	if o == nil || o.Length == nil {
		var ret int64
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetLengthOk() (*int64, bool) {
	if o == nil || o.Length == nil {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *VaultFileStream) HasLength() bool {
	if o != nil && o.Length != nil {
		return true
	}

	return false
}

// SetLength gets a reference to the given int64 and assigns it to the Length field.
func (o *VaultFileStream) SetLength(v int64) {
	o.Length = &v
}

// GetPerformedWrite returns the PerformedWrite field value if set, zero value otherwise.
func (o *VaultFileStream) GetPerformedWrite() bool {
	if o == nil || o.PerformedWrite == nil {
		var ret bool
		return ret
	}
	return *o.PerformedWrite
}

// GetPerformedWriteOk returns a tuple with the PerformedWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetPerformedWriteOk() (*bool, bool) {
	if o == nil || o.PerformedWrite == nil {
		return nil, false
	}
	return o.PerformedWrite, true
}

// HasPerformedWrite returns a boolean if a field has been set.
func (o *VaultFileStream) HasPerformedWrite() bool {
	if o != nil && o.PerformedWrite != nil {
		return true
	}

	return false
}

// SetPerformedWrite gets a reference to the given bool and assigns it to the PerformedWrite field.
func (o *VaultFileStream) SetPerformedWrite(v bool) {
	o.PerformedWrite = &v
}

// GetCommitChangesOnClose returns the CommitChangesOnClose field value if set, zero value otherwise.
func (o *VaultFileStream) GetCommitChangesOnClose() bool {
	if o == nil || o.CommitChangesOnClose == nil {
		var ret bool
		return ret
	}
	return *o.CommitChangesOnClose
}

// GetCommitChangesOnCloseOk returns a tuple with the CommitChangesOnClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetCommitChangesOnCloseOk() (*bool, bool) {
	if o == nil || o.CommitChangesOnClose == nil {
		return nil, false
	}
	return o.CommitChangesOnClose, true
}

// HasCommitChangesOnClose returns a boolean if a field has been set.
func (o *VaultFileStream) HasCommitChangesOnClose() bool {
	if o != nil && o.CommitChangesOnClose != nil {
		return true
	}

	return false
}

// SetCommitChangesOnClose gets a reference to the given bool and assigns it to the CommitChangesOnClose field.
func (o *VaultFileStream) SetCommitChangesOnClose(v bool) {
	o.CommitChangesOnClose = &v
}

// GetPerformedSeekResume returns the PerformedSeekResume field value if set, zero value otherwise.
func (o *VaultFileStream) GetPerformedSeekResume() bool {
	if o == nil || o.PerformedSeekResume == nil {
		var ret bool
		return ret
	}
	return *o.PerformedSeekResume
}

// GetPerformedSeekResumeOk returns a tuple with the PerformedSeekResume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetPerformedSeekResumeOk() (*bool, bool) {
	if o == nil || o.PerformedSeekResume == nil {
		return nil, false
	}
	return o.PerformedSeekResume, true
}

// HasPerformedSeekResume returns a boolean if a field has been set.
func (o *VaultFileStream) HasPerformedSeekResume() bool {
	if o != nil && o.PerformedSeekResume != nil {
		return true
	}

	return false
}

// SetPerformedSeekResume gets a reference to the given bool and assigns it to the PerformedSeekResume field.
func (o *VaultFileStream) SetPerformedSeekResume(v bool) {
	o.PerformedSeekResume = &v
}

// GetCanTimeout returns the CanTimeout field value if set, zero value otherwise.
func (o *VaultFileStream) GetCanTimeout() bool {
	if o == nil || o.CanTimeout == nil {
		var ret bool
		return ret
	}
	return *o.CanTimeout
}

// GetCanTimeoutOk returns a tuple with the CanTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetCanTimeoutOk() (*bool, bool) {
	if o == nil || o.CanTimeout == nil {
		return nil, false
	}
	return o.CanTimeout, true
}

// HasCanTimeout returns a boolean if a field has been set.
func (o *VaultFileStream) HasCanTimeout() bool {
	if o != nil && o.CanTimeout != nil {
		return true
	}

	return false
}

// SetCanTimeout gets a reference to the given bool and assigns it to the CanTimeout field.
func (o *VaultFileStream) SetCanTimeout(v bool) {
	o.CanTimeout = &v
}

// GetReadTimeout returns the ReadTimeout field value if set, zero value otherwise.
func (o *VaultFileStream) GetReadTimeout() int32 {
	if o == nil || o.ReadTimeout == nil {
		var ret int32
		return ret
	}
	return *o.ReadTimeout
}

// GetReadTimeoutOk returns a tuple with the ReadTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetReadTimeoutOk() (*int32, bool) {
	if o == nil || o.ReadTimeout == nil {
		return nil, false
	}
	return o.ReadTimeout, true
}

// HasReadTimeout returns a boolean if a field has been set.
func (o *VaultFileStream) HasReadTimeout() bool {
	if o != nil && o.ReadTimeout != nil {
		return true
	}

	return false
}

// SetReadTimeout gets a reference to the given int32 and assigns it to the ReadTimeout field.
func (o *VaultFileStream) SetReadTimeout(v int32) {
	o.ReadTimeout = &v
}

// GetWriteTimeout returns the WriteTimeout field value if set, zero value otherwise.
func (o *VaultFileStream) GetWriteTimeout() int32 {
	if o == nil || o.WriteTimeout == nil {
		var ret int32
		return ret
	}
	return *o.WriteTimeout
}

// GetWriteTimeoutOk returns a tuple with the WriteTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultFileStream) GetWriteTimeoutOk() (*int32, bool) {
	if o == nil || o.WriteTimeout == nil {
		return nil, false
	}
	return o.WriteTimeout, true
}

// HasWriteTimeout returns a boolean if a field has been set.
func (o *VaultFileStream) HasWriteTimeout() bool {
	if o != nil && o.WriteTimeout != nil {
		return true
	}

	return false
}

// SetWriteTimeout gets a reference to the given int32 and assigns it to the WriteTimeout field.
func (o *VaultFileStream) SetWriteTimeout(v int32) {
	o.WriteTimeout = &v
}

func (o VaultFileStream) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StayLockAfterUpdate != nil {
		toSerialize["StayLockAfterUpdate"] = o.StayLockAfterUpdate
	}
	if o.SeekHandle != nil {
		toSerialize["SeekHandle"] = o.SeekHandle
	}
	if o.CreationDate != nil {
		toSerialize["CreationDate"] = o.CreationDate
	}
	if o.ModificationDate != nil {
		toSerialize["ModificationDate"] = o.ModificationDate
	}
	if o.Exist != nil {
		toSerialize["Exist"] = o.Exist
	}
	if o.CanRead != nil {
		toSerialize["CanRead"] = o.CanRead
	}
	if o.CanSeek != nil {
		toSerialize["CanSeek"] = o.CanSeek
	}
	if o.CanWrite != nil {
		toSerialize["CanWrite"] = o.CanWrite
	}
	if o.Position != nil {
		toSerialize["Position"] = o.Position
	}
	if o.Length != nil {
		toSerialize["Length"] = o.Length
	}
	if o.PerformedWrite != nil {
		toSerialize["PerformedWrite"] = o.PerformedWrite
	}
	if o.CommitChangesOnClose != nil {
		toSerialize["CommitChangesOnClose"] = o.CommitChangesOnClose
	}
	if o.PerformedSeekResume != nil {
		toSerialize["PerformedSeekResume"] = o.PerformedSeekResume
	}
	if o.CanTimeout != nil {
		toSerialize["CanTimeout"] = o.CanTimeout
	}
	if o.ReadTimeout != nil {
		toSerialize["ReadTimeout"] = o.ReadTimeout
	}
	if o.WriteTimeout != nil {
		toSerialize["WriteTimeout"] = o.WriteTimeout
	}
	return json.Marshal(toSerialize)
}

type NullableVaultFileStream struct {
	value *VaultFileStream
	isSet bool
}

func (v NullableVaultFileStream) Get() *VaultFileStream {
	return v.value
}

func (v *NullableVaultFileStream) Set(val *VaultFileStream) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultFileStream) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultFileStream) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultFileStream(val *VaultFileStream) *NullableVaultFileStream {
	return &NullableVaultFileStream{value: val, isSet: true}
}

func (v NullableVaultFileStream) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultFileStream) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
