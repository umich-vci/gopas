/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gopas

import (
	"encoding/json"
)

// MemberGroup struct for MemberGroup
type MemberGroup struct {
	Username *string `json:"username,omitempty"`
	Id       *int64  `json:"id,omitempty"`
}

// NewMemberGroup instantiates a new MemberGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberGroup() *MemberGroup {
	this := MemberGroup{}
	return &this
}

// NewMemberGroupWithDefaults instantiates a new MemberGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberGroupWithDefaults() *MemberGroup {
	this := MemberGroup{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *MemberGroup) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberGroup) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *MemberGroup) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *MemberGroup) SetUsername(v string) {
	o.Username = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MemberGroup) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberGroup) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MemberGroup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *MemberGroup) SetId(v int64) {
	o.Id = &v
}

func (o MemberGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableMemberGroup struct {
	value *MemberGroup
	isSet bool
}

func (v NullableMemberGroup) Get() *MemberGroup {
	return v.value
}

func (v *NullableMemberGroup) Set(val *MemberGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberGroup(val *MemberGroup) *NullableMemberGroup {
	return &NullableMemberGroup{value: val, isSet: true}
}

func (v NullableMemberGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
