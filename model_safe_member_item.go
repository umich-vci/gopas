/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gopas

import (
	"encoding/json"
)

// SafeMemberItem struct for SafeMemberItem
type SafeMemberItem struct {
	// The Vault user name, Domain user name or group name of the Safe member.
	MemberName string `json:"MemberName"`
	// The Vault or Domain where the user or group was found.
	SearchIn *string `json:"SearchIn,omitempty"`
	// The member's expiration date for this Safe.  For members that do not have an expiration date, this value will be null.
	MembershipExpirationDate *int64 `json:"MembershipExpirationDate,omitempty"`
	// <p>The permissions that the user or group has in this Safe.</p>  <p>    <B>useAccounts</B> - Use accounts but not view passwords.</p>  <p>    <B>retrieveAccounts</B> - Retrieve and view accounts in the Safe.</p>  <p>    <B>listAccounts</B> - View Accounts list.</p>  <p>    <B>addAccounts</B> - Add accounts in the Safe. Users who have this permission automatically have UpdateAccountProperties as well.</p>  <p>    <B>updateAccountContent</B> - Update existing account content.</p>  <p>    <B>updateAccountProperties</B> - Update existing account properties.</p>  <p>    <B>initiateCPMAccountManagementOperations</B> - Initiate password management operations through CPM, such as changing, verifying, and reconciling passwords. When this parameter is set to False, the SpecifyNextAccountContent parameter is also automatically set to False.</p>  <p>    <B>specifyNextAccountContent</B> - Specify the password that is used when the CPM changes the password value. This parameter can only be specified when the InitiateCPMAccountManagementOperations parameter is set to True. When InitiateCPMAccountManagementOperations is set to False this parameter is automatically set to False.</p>  <p>    <B>renameAccounts</B> - Rename existing accounts in the Safe.</p>  <p>    <B>deleteAccounts</B> - Delete existing passwords in the Safe.</p>  <p>    <B>unlockAccounts</B> - Unlock accounts that are locked by other users.</p>  <p>    <B>manageSafe</B> - Perform administrative tasksin the Safe, including: Update Safe properties, Recover the Safe, Delete the Safe.</p>  <p>    <B>manageSafeMembers</B> - Add and remove Safe members, and update their authorizations in the Safe.</p>  <p>    <B>backupSafe</B> - Create a backup of a Safe and its contents, and store in another location.</p>  <p>    <B>viewAuditLog</B> - View account and user activity in the Safe.</p>  <p>    <B>viewSafeMembers</B> - View Safe member's permissions.</p>  <p>    <B>requestsAuthorizationLevel1</B> - Request Authorization Level 1.</p>  <p>    <B>requestsAuthorizationLevel2</B> - Request Authorization Level 2.</p>  <p>    <B>accessWithoutConfirmation</B> - Access the Safe without confirmation from authorized users. This overrides the Safe properties that specify that Safe members require confirmation to access the Safe.</p>  <p>    <B>createFolders</B> - Create folders in the Safe.</p>  <p>    <B>deleteFolders</B> - Delete folders from the Safe.</p>  <p>    <B>moveAccountsAndFolders</B> - Move accounts and folders in the Safe to different folders and subfolders.</p>
	Permissions map[string]bool `json:"Permissions"`
}

// NewSafeMemberItem instantiates a new SafeMemberItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSafeMemberItem(memberName string, permissions map[string]bool) *SafeMemberItem {
	this := SafeMemberItem{}
	this.MemberName = memberName
	this.Permissions = permissions
	return &this
}

// NewSafeMemberItemWithDefaults instantiates a new SafeMemberItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSafeMemberItemWithDefaults() *SafeMemberItem {
	this := SafeMemberItem{}
	return &this
}

// GetMemberName returns the MemberName field value
func (o *SafeMemberItem) GetMemberName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MemberName
}

// GetMemberNameOk returns a tuple with the MemberName field value
// and a boolean to check if the value has been set.
func (o *SafeMemberItem) GetMemberNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemberName, true
}

// SetMemberName sets field value
func (o *SafeMemberItem) SetMemberName(v string) {
	o.MemberName = v
}

// GetSearchIn returns the SearchIn field value if set, zero value otherwise.
func (o *SafeMemberItem) GetSearchIn() string {
	if o == nil || o.SearchIn == nil {
		var ret string
		return ret
	}
	return *o.SearchIn
}

// GetSearchInOk returns a tuple with the SearchIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeMemberItem) GetSearchInOk() (*string, bool) {
	if o == nil || o.SearchIn == nil {
		return nil, false
	}
	return o.SearchIn, true
}

// HasSearchIn returns a boolean if a field has been set.
func (o *SafeMemberItem) HasSearchIn() bool {
	if o != nil && o.SearchIn != nil {
		return true
	}

	return false
}

// SetSearchIn gets a reference to the given string and assigns it to the SearchIn field.
func (o *SafeMemberItem) SetSearchIn(v string) {
	o.SearchIn = &v
}

// GetMembershipExpirationDate returns the MembershipExpirationDate field value if set, zero value otherwise.
func (o *SafeMemberItem) GetMembershipExpirationDate() int64 {
	if o == nil || o.MembershipExpirationDate == nil {
		var ret int64
		return ret
	}
	return *o.MembershipExpirationDate
}

// GetMembershipExpirationDateOk returns a tuple with the MembershipExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeMemberItem) GetMembershipExpirationDateOk() (*int64, bool) {
	if o == nil || o.MembershipExpirationDate == nil {
		return nil, false
	}
	return o.MembershipExpirationDate, true
}

// HasMembershipExpirationDate returns a boolean if a field has been set.
func (o *SafeMemberItem) HasMembershipExpirationDate() bool {
	if o != nil && o.MembershipExpirationDate != nil {
		return true
	}

	return false
}

// SetMembershipExpirationDate gets a reference to the given int64 and assigns it to the MembershipExpirationDate field.
func (o *SafeMemberItem) SetMembershipExpirationDate(v int64) {
	o.MembershipExpirationDate = &v
}

// GetPermissions returns the Permissions field value
func (o *SafeMemberItem) GetPermissions() map[string]bool {
	if o == nil {
		var ret map[string]bool
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *SafeMemberItem) GetPermissionsOk() (*map[string]bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permissions, true
}

// SetPermissions sets field value
func (o *SafeMemberItem) SetPermissions(v map[string]bool) {
	o.Permissions = v
}

func (o SafeMemberItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["MemberName"] = o.MemberName
	}
	if o.SearchIn != nil {
		toSerialize["SearchIn"] = o.SearchIn
	}
	if o.MembershipExpirationDate != nil {
		toSerialize["MembershipExpirationDate"] = o.MembershipExpirationDate
	}
	if true {
		toSerialize["Permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableSafeMemberItem struct {
	value *SafeMemberItem
	isSet bool
}

func (v NullableSafeMemberItem) Get() *SafeMemberItem {
	return v.value
}

func (v *NullableSafeMemberItem) Set(val *SafeMemberItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSafeMemberItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSafeMemberItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSafeMemberItem(val *SafeMemberItem) *NullableSafeMemberItem {
	return &NullableSafeMemberItem{value: val, isSet: true}
}

func (v NullableSafeMemberItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSafeMemberItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
