/*
Privileged Access Security REST API

Display the PVWA REST APIs below for a description of how to use them and try them out. Access information about additional REST APIs through the online documentation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gopas

import (
	"encoding/json"
)

// NewRequestBody struct for NewRequestBody
type NewRequestBody struct {
	// The ID of the account to access.
	AccountId string `json:"AccountId"`
	// The reason why the account needs to be accessed.
	Reason *string `json:"Reason,omitempty"`
	// The name of the Ticketing System specified in the request.
	TicketingSystemName *string `json:"TicketingSystemName,omitempty"`
	// The ticket ID given by the ticketing system.
	TicketId *string `json:"TicketId,omitempty"`
	// Whether or not the request is for multiple access.
	MultipleAccessRequired *bool `json:"MultipleAccessRequired,omitempty"`
	// If the request is for a timeframe, the time from when the user wants to access the account, in Unix time.
	FromDate *int64 `json:"FromDate,omitempty"`
	// If the request is for a timeframe, the time until when the user wants to access the account, in Unix time.
	ToDate *int64 `json:"ToDate,omitempty"`
	// Additional information included in the request. A list of values that are predefined in configuration.
	AdditionalInfo *map[string]string `json:"AdditionalInfo,omitempty"`
	// Whether or not the request is for connection through the PSM.
	UseConnect *bool `json:"UseConnect,omitempty"`
	// If the connection is through PSM, the name of the connection component to connect with, as defined in the configuration.
	ConnectionComponent *string `json:"ConnectionComponent,omitempty"`
	// A list of parameters required to perform the connection, as defined in each connection component configuration. These parameters are listed in the table below.  Each item contains: key,   { value - The content of the parameter,   ShouldSave - Whether or not this value will be saved with the account for future attempts to connect to the remote machine.}
	ConnectionParams *map[string]ConnectionParameter `json:"ConnectionParams,omitempty"`
}

// NewNewRequestBody instantiates a new NewRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewRequestBody(accountId string) *NewRequestBody {
	this := NewRequestBody{}
	this.AccountId = accountId
	return &this
}

// NewNewRequestBodyWithDefaults instantiates a new NewRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewRequestBodyWithDefaults() *NewRequestBody {
	this := NewRequestBody{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *NewRequestBody) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *NewRequestBody) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *NewRequestBody) SetAccountId(v string) {
	o.AccountId = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *NewRequestBody) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewRequestBody) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *NewRequestBody) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *NewRequestBody) SetReason(v string) {
	o.Reason = &v
}

// GetTicketingSystemName returns the TicketingSystemName field value if set, zero value otherwise.
func (o *NewRequestBody) GetTicketingSystemName() string {
	if o == nil || o.TicketingSystemName == nil {
		var ret string
		return ret
	}
	return *o.TicketingSystemName
}

// GetTicketingSystemNameOk returns a tuple with the TicketingSystemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewRequestBody) GetTicketingSystemNameOk() (*string, bool) {
	if o == nil || o.TicketingSystemName == nil {
		return nil, false
	}
	return o.TicketingSystemName, true
}

// HasTicketingSystemName returns a boolean if a field has been set.
func (o *NewRequestBody) HasTicketingSystemName() bool {
	if o != nil && o.TicketingSystemName != nil {
		return true
	}

	return false
}

// SetTicketingSystemName gets a reference to the given string and assigns it to the TicketingSystemName field.
func (o *NewRequestBody) SetTicketingSystemName(v string) {
	o.TicketingSystemName = &v
}

// GetTicketId returns the TicketId field value if set, zero value otherwise.
func (o *NewRequestBody) GetTicketId() string {
	if o == nil || o.TicketId == nil {
		var ret string
		return ret
	}
	return *o.TicketId
}

// GetTicketIdOk returns a tuple with the TicketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewRequestBody) GetTicketIdOk() (*string, bool) {
	if o == nil || o.TicketId == nil {
		return nil, false
	}
	return o.TicketId, true
}

// HasTicketId returns a boolean if a field has been set.
func (o *NewRequestBody) HasTicketId() bool {
	if o != nil && o.TicketId != nil {
		return true
	}

	return false
}

// SetTicketId gets a reference to the given string and assigns it to the TicketId field.
func (o *NewRequestBody) SetTicketId(v string) {
	o.TicketId = &v
}

// GetMultipleAccessRequired returns the MultipleAccessRequired field value if set, zero value otherwise.
func (o *NewRequestBody) GetMultipleAccessRequired() bool {
	if o == nil || o.MultipleAccessRequired == nil {
		var ret bool
		return ret
	}
	return *o.MultipleAccessRequired
}

// GetMultipleAccessRequiredOk returns a tuple with the MultipleAccessRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewRequestBody) GetMultipleAccessRequiredOk() (*bool, bool) {
	if o == nil || o.MultipleAccessRequired == nil {
		return nil, false
	}
	return o.MultipleAccessRequired, true
}

// HasMultipleAccessRequired returns a boolean if a field has been set.
func (o *NewRequestBody) HasMultipleAccessRequired() bool {
	if o != nil && o.MultipleAccessRequired != nil {
		return true
	}

	return false
}

// SetMultipleAccessRequired gets a reference to the given bool and assigns it to the MultipleAccessRequired field.
func (o *NewRequestBody) SetMultipleAccessRequired(v bool) {
	o.MultipleAccessRequired = &v
}

// GetFromDate returns the FromDate field value if set, zero value otherwise.
func (o *NewRequestBody) GetFromDate() int64 {
	if o == nil || o.FromDate == nil {
		var ret int64
		return ret
	}
	return *o.FromDate
}

// GetFromDateOk returns a tuple with the FromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewRequestBody) GetFromDateOk() (*int64, bool) {
	if o == nil || o.FromDate == nil {
		return nil, false
	}
	return o.FromDate, true
}

// HasFromDate returns a boolean if a field has been set.
func (o *NewRequestBody) HasFromDate() bool {
	if o != nil && o.FromDate != nil {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given int64 and assigns it to the FromDate field.
func (o *NewRequestBody) SetFromDate(v int64) {
	o.FromDate = &v
}

// GetToDate returns the ToDate field value if set, zero value otherwise.
func (o *NewRequestBody) GetToDate() int64 {
	if o == nil || o.ToDate == nil {
		var ret int64
		return ret
	}
	return *o.ToDate
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewRequestBody) GetToDateOk() (*int64, bool) {
	if o == nil || o.ToDate == nil {
		return nil, false
	}
	return o.ToDate, true
}

// HasToDate returns a boolean if a field has been set.
func (o *NewRequestBody) HasToDate() bool {
	if o != nil && o.ToDate != nil {
		return true
	}

	return false
}

// SetToDate gets a reference to the given int64 and assigns it to the ToDate field.
func (o *NewRequestBody) SetToDate(v int64) {
	o.ToDate = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *NewRequestBody) GetAdditionalInfo() map[string]string {
	if o == nil || o.AdditionalInfo == nil {
		var ret map[string]string
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewRequestBody) GetAdditionalInfoOk() (*map[string]string, bool) {
	if o == nil || o.AdditionalInfo == nil {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *NewRequestBody) HasAdditionalInfo() bool {
	if o != nil && o.AdditionalInfo != nil {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given map[string]string and assigns it to the AdditionalInfo field.
func (o *NewRequestBody) SetAdditionalInfo(v map[string]string) {
	o.AdditionalInfo = &v
}

// GetUseConnect returns the UseConnect field value if set, zero value otherwise.
func (o *NewRequestBody) GetUseConnect() bool {
	if o == nil || o.UseConnect == nil {
		var ret bool
		return ret
	}
	return *o.UseConnect
}

// GetUseConnectOk returns a tuple with the UseConnect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewRequestBody) GetUseConnectOk() (*bool, bool) {
	if o == nil || o.UseConnect == nil {
		return nil, false
	}
	return o.UseConnect, true
}

// HasUseConnect returns a boolean if a field has been set.
func (o *NewRequestBody) HasUseConnect() bool {
	if o != nil && o.UseConnect != nil {
		return true
	}

	return false
}

// SetUseConnect gets a reference to the given bool and assigns it to the UseConnect field.
func (o *NewRequestBody) SetUseConnect(v bool) {
	o.UseConnect = &v
}

// GetConnectionComponent returns the ConnectionComponent field value if set, zero value otherwise.
func (o *NewRequestBody) GetConnectionComponent() string {
	if o == nil || o.ConnectionComponent == nil {
		var ret string
		return ret
	}
	return *o.ConnectionComponent
}

// GetConnectionComponentOk returns a tuple with the ConnectionComponent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewRequestBody) GetConnectionComponentOk() (*string, bool) {
	if o == nil || o.ConnectionComponent == nil {
		return nil, false
	}
	return o.ConnectionComponent, true
}

// HasConnectionComponent returns a boolean if a field has been set.
func (o *NewRequestBody) HasConnectionComponent() bool {
	if o != nil && o.ConnectionComponent != nil {
		return true
	}

	return false
}

// SetConnectionComponent gets a reference to the given string and assigns it to the ConnectionComponent field.
func (o *NewRequestBody) SetConnectionComponent(v string) {
	o.ConnectionComponent = &v
}

// GetConnectionParams returns the ConnectionParams field value if set, zero value otherwise.
func (o *NewRequestBody) GetConnectionParams() map[string]ConnectionParameter {
	if o == nil || o.ConnectionParams == nil {
		var ret map[string]ConnectionParameter
		return ret
	}
	return *o.ConnectionParams
}

// GetConnectionParamsOk returns a tuple with the ConnectionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewRequestBody) GetConnectionParamsOk() (*map[string]ConnectionParameter, bool) {
	if o == nil || o.ConnectionParams == nil {
		return nil, false
	}
	return o.ConnectionParams, true
}

// HasConnectionParams returns a boolean if a field has been set.
func (o *NewRequestBody) HasConnectionParams() bool {
	if o != nil && o.ConnectionParams != nil {
		return true
	}

	return false
}

// SetConnectionParams gets a reference to the given map[string]ConnectionParameter and assigns it to the ConnectionParams field.
func (o *NewRequestBody) SetConnectionParams(v map[string]ConnectionParameter) {
	o.ConnectionParams = &v
}

func (o NewRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["AccountId"] = o.AccountId
	}
	if o.Reason != nil {
		toSerialize["Reason"] = o.Reason
	}
	if o.TicketingSystemName != nil {
		toSerialize["TicketingSystemName"] = o.TicketingSystemName
	}
	if o.TicketId != nil {
		toSerialize["TicketId"] = o.TicketId
	}
	if o.MultipleAccessRequired != nil {
		toSerialize["MultipleAccessRequired"] = o.MultipleAccessRequired
	}
	if o.FromDate != nil {
		toSerialize["FromDate"] = o.FromDate
	}
	if o.ToDate != nil {
		toSerialize["ToDate"] = o.ToDate
	}
	if o.AdditionalInfo != nil {
		toSerialize["AdditionalInfo"] = o.AdditionalInfo
	}
	if o.UseConnect != nil {
		toSerialize["UseConnect"] = o.UseConnect
	}
	if o.ConnectionComponent != nil {
		toSerialize["ConnectionComponent"] = o.ConnectionComponent
	}
	if o.ConnectionParams != nil {
		toSerialize["ConnectionParams"] = o.ConnectionParams
	}
	return json.Marshal(toSerialize)
}

type NullableNewRequestBody struct {
	value *NewRequestBody
	isSet bool
}

func (v NullableNewRequestBody) Get() *NewRequestBody {
	return v.value
}

func (v *NullableNewRequestBody) Set(val *NewRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableNewRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableNewRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewRequestBody(val *NewRequestBody) *NullableNewRequestBody {
	return &NullableNewRequestBody{value: val, isSet: true}
}

func (v NullableNewRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
